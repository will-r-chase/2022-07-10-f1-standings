@use "variables" as *;
@use "functions" as *;
@use "sass:map";
@use "sass:list";

/*=================================
=            Mixins            =
=================================*/

// Breakpoints
// $break: Breakpoint to use
// $dir: 'min-width' or 'max-width'
// $until: Maximum width
// @include mq('medium');
// @include mq($break: 'medium', $until: 'large');
// @include mq($break: 'medium', $dir: 'max-width');
@mixin mq(
  $break,
  $dir: "min-width",
  $until: null,
  $breakpoints-map: $breakpoints
) {
  @if not map-has-key($breakpoints-map, $break) {
    $break: $break;
  } @else {
    $break: map-get($breakpoints-map, $break);
  }

  @if $break and $until {
    @if not map-has-key($breakpoints-map, $until) {
      $until: $until;
    } @else {
      $until: map-get($breakpoints-map, $until);
    }

    @media screen and (min-width: $break) and (max-width: $until) {
      @content;
    }
  } @else {
    @media screen and ($dir: $break) {
      @content;
    }
  }
}

// Rem output with px fallback
@mixin font-size($size) {
  font-size: $size; //Fallback in px
  font-size: rem($size);
}

// Font scales in size with the smallest media query size allowed to the ideal and largest.
// Parameters are the minimum and maximum font size(px) as dictated in Figma.
// Taken from: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
@mixin font-clamp($min, $max) {
  $min-font-size: rem($min);
  $max-font-size: rem($max);

  $preferred-value: calc-preferred-font-value($min-font-size, $max-font-size);

  $preferred-font-size: list.nth($preferred-value, 1);

  $preferred-vw: list.nth($preferred-value, 2);

  font-size: $min; //Fallback in px
  font-size: $min-font-size;

  /* stylelint-disable */
  font-size: clamp(
    #{$min-font-size},
    calc(#{$preferred-font-size} + #{$preferred-vw}),
    #{$max-font-size}
  );
  /* stylelint-enable */
}
